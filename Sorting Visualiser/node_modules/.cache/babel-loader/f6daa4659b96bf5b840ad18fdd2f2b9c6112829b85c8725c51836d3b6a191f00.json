{"ast":null,"code":"const getBubbleSortAnimations = array => {\n  const animations = []; // { comparingElement1, comparingElement2, doSwap, isFinalElement, finalElement }\n\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      // Push animation for comparing 2 elements\n      animations.push(j, j + 1, false, false, -1);\n      if (array[j] > array[j + 1]) {\n        // Swapping values\n        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n        // Push animation for swapping 2 values\n        animations.push(j, j + 1, true, false, -1);\n      }\n    }\n    // Here, the (array.length - 1 - i)th indexed element will be sorted. So we need to change its color.\n    // Push animation for (array.length - 1 - i)th indexed element which got its sorted position.\n    animations.push(array.length - 1 - i, array.length - 1 - i, false, true, array.length - 1 - i);\n  }\n  // Push animation to know that it's the end of the animation.\n  animations.push(0, 0, false, true, 0);\n  return animations;\n};\nexport default getBubbleSortAnimations;","map":{"version":3,"names":["getBubbleSortAnimations","array","animations","i","length","j","push"],"sources":["/Users/poojithaprasad/algovizmain/pushcodefolder/Dal-Go--Data-Structure-and-Algorithm-Visualiser/Sorting Visualiser/src/SortingVisualizer/SortingAlgorithms/BubbleSort/getBubbleSortAnimations.js"],"sourcesContent":["const getBubbleSortAnimations = (array) => {\n  const animations = []; // { comparingElement1, comparingElement2, doSwap, isFinalElement, finalElement }\n\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      // Push animation for comparing 2 elements\n      animations.push(j, j + 1, false, false, -1);\n      if (array[j] > array[j + 1]) {\n        // Swapping values\n        [array[j], array[j + 1]] = [array[j + 1], array[j]];\n        // Push animation for swapping 2 values\n        animations.push(j, j + 1, true, false, -1);\n      }\n    }\n    // Here, the (array.length - 1 - i)th indexed element will be sorted. So we need to change its color.\n    // Push animation for (array.length - 1 - i)th indexed element which got its sorted position.\n    animations.push(\n      array.length - 1 - i,\n      array.length - 1 - i,\n      false,\n      true,\n      array.length - 1 - i\n    );\n  }\n  // Push animation to know that it's the end of the animation.\n  animations.push(0, 0, false, true, 0);\n\n  return animations;\n};\n\nexport default getBubbleSortAnimations;\n"],"mappings":"AAAA,MAAMA,uBAAuB,GAAIC,KAAK,IAAK;EACzC,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;IACzC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACG,MAAM,GAAGD,CAAC,GAAG,CAAC,EAAEE,CAAC,EAAE,EAAE;MAC7C;MACAH,UAAU,CAACI,IAAI,CAACD,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;MAC3C,IAAIJ,KAAK,CAACI,CAAC,CAAC,GAAGJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,EAAE;QAC3B;QACA,CAACJ,KAAK,CAACI,CAAC,CAAC,EAAEJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAACJ,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,EAAEJ,KAAK,CAACI,CAAC,CAAC,CAAC;QACnD;QACAH,UAAU,CAACI,IAAI,CAACD,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;MAC5C;IACF;IACA;IACA;IACAH,UAAU,CAACI,IAAI,CACbL,KAAK,CAACG,MAAM,GAAG,CAAC,GAAGD,CAAC,EACpBF,KAAK,CAACG,MAAM,GAAG,CAAC,GAAGD,CAAC,EACpB,KAAK,EACL,IAAI,EACJF,KAAK,CAACG,MAAM,GAAG,CAAC,GAAGD,CAAC,CACrB;EACH;EACA;EACAD,UAAU,CAACI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;EAErC,OAAOJ,UAAU;AACnB,CAAC;AAED,eAAeF,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}