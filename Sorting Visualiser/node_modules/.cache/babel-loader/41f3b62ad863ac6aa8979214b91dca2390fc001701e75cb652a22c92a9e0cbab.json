{"ast":null,"code":"const getSelectionSortAnimations = array => {\n  const animations = []; // { currElement, comparingElement, minIndex, doSwap, isFinalElement, finalElement }\n\n  let min_idx;\n  for (let i = 0; i < array.length; i++) {\n    min_idx = i;\n    // Push animation for the current element which has to be sorted.\n    animations.push(i, i, min_idx, false, false, -1);\n    for (let j = i + 1; j < array.length; j++) {\n      // Push animation for (i)th, (j)th and (min_idx)th index elements.\n      animations.push(i, j, min_idx, false, false, -1);\n      if (array[j] < array[min_idx]) {\n        min_idx = j;\n        // Push animation for changing min_idx element.\n        animations.push(i, j, min_idx, false, false, -1);\n      }\n    }\n    if (min_idx !== i) {\n      // Swapping 2 values.\n      [array[i], array[min_idx]] = [array[min_idx], array[i]];\n      // Push animation for swapping (i)th index and (min_idx)th index elements.\n      animations.push(i, i, min_idx, true, false, -1);\n    }\n    // Here, the (i)th indexed element will be sorted. So we need to change its color.\n    // Push animation for (i)th indexed element which got its sorted position.\n    animations.push(i, i, i, false, true, i);\n  }\n  return animations;\n};\nexport default getSelectionSortAnimations;","map":{"version":3,"names":["getSelectionSortAnimations","array","animations","min_idx","i","length","push","j"],"sources":["/Users/poojithaprasad/algovizmain/Dal-Go--Data-Structure-and-Algorithm-Visualiser/Sorting Visualiser/src/SortingVisualizer/SortingAlgorithms/SelectionSort/getSelectionSortAnimations.js"],"sourcesContent":["const getSelectionSortAnimations = (array) => {\n  const animations = []; // { currElement, comparingElement, minIndex, doSwap, isFinalElement, finalElement }\n\n  let min_idx;\n  for (let i = 0; i < array.length; i++) {\n    min_idx = i;\n    // Push animation for the current element which has to be sorted.\n    animations.push(i, i, min_idx, false, false, -1);\n\n    for (let j = i + 1; j < array.length; j++) {\n      // Push animation for (i)th, (j)th and (min_idx)th index elements.\n      animations.push(i, j, min_idx, false, false, -1);\n      if (array[j] < array[min_idx]) {\n        min_idx = j;\n        // Push animation for changing min_idx element.\n        animations.push(i, j, min_idx, false, false, -1);\n      }\n    }\n    if (min_idx !== i) {\n      // Swapping 2 values.\n      [array[i], array[min_idx]] = [array[min_idx], array[i]];\n      // Push animation for swapping (i)th index and (min_idx)th index elements.\n      animations.push(i, i, min_idx, true, false, -1);\n    }\n    // Here, the (i)th indexed element will be sorted. So we need to change its color.\n    // Push animation for (i)th indexed element which got its sorted position.\n    animations.push(i, i, i, false, true, i);\n  }\n\n  return animations;\n};\n\nexport default getSelectionSortAnimations;\n"],"mappings":"AAAA,MAAMA,0BAA0B,GAAIC,KAAK,IAAK;EAC5C,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,IAAIC,OAAO;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCD,OAAO,GAAGC,CAAC;IACX;IACAF,UAAU,CAACI,IAAI,CAACF,CAAC,EAAEA,CAAC,EAAED,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAEhD,KAAK,IAAII,CAAC,GAAGH,CAAC,GAAG,CAAC,EAAEG,CAAC,GAAGN,KAAK,CAACI,MAAM,EAAEE,CAAC,EAAE,EAAE;MACzC;MACAL,UAAU,CAACI,IAAI,CAACF,CAAC,EAAEG,CAAC,EAAEJ,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;MAChD,IAAIF,KAAK,CAACM,CAAC,CAAC,GAAGN,KAAK,CAACE,OAAO,CAAC,EAAE;QAC7BA,OAAO,GAAGI,CAAC;QACX;QACAL,UAAU,CAACI,IAAI,CAACF,CAAC,EAAEG,CAAC,EAAEJ,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;MAClD;IACF;IACA,IAAIA,OAAO,KAAKC,CAAC,EAAE;MACjB;MACA,CAACH,KAAK,CAACG,CAAC,CAAC,EAAEH,KAAK,CAACE,OAAO,CAAC,CAAC,GAAG,CAACF,KAAK,CAACE,OAAO,CAAC,EAAEF,KAAK,CAACG,CAAC,CAAC,CAAC;MACvD;MACAF,UAAU,CAACI,IAAI,CAACF,CAAC,EAAEA,CAAC,EAAED,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IACjD;IACA;IACA;IACAD,UAAU,CAACI,IAAI,CAACF,CAAC,EAAEA,CAAC,EAAEA,CAAC,EAAE,KAAK,EAAE,IAAI,EAAEA,CAAC,CAAC;EAC1C;EAEA,OAAOF,UAAU;AACnB,CAAC;AAED,eAAeF,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}