{"ast":null,"code":"import getSelectionSortAnimations from \"./getSelectionSortAnimations\";\nimport { changeBackgroundColor, changeBoxShadow, swapBars, resetBarStyleDefault, disableButtons, enableButtons, playCompletedSoundEffect } from \"../../HelperFunctions.js\";\nconst SelectionSort = (array, animationSpeed) => {\n  // Disabling the buttons so that the animation cannot be interrupted.\n  disableButtons();\n\n  // Getting the animations which has been generated in the \"getBubbleSortAnimations\" function.\n  const animations = getSelectionSortAnimations(array);\n  for (let i = 0; i < animations.length; i += 6) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1],\n      minIndexElement = animations[i + 2],\n      doSwap = animations[i + 3],\n      isFinalElement = animations[i + 4],\n      finalElement = animations[i + 5];\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bar of current elements.\n        changeBackgroundColor(minIndexElement, \"rgba(0,0,255, 0.9)\");\n        changeBackgroundColor(comparingElement1, \"rgba(0,0,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n        if (doSwap === true) {\n          // Changing the color-bar of elements which has to be swapped.\n          changeBackgroundColor(minIndexElement, \"rgba(144,238,144, 0.9)\");\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\n          // Actually swapping the elements (heights).\n          swapBars(comparingElement1, minIndexElement);\n        }\n      }, i * animationSpeed);\n\n      // Resolving the promise after the setTimeout ends.\n      resolve();\n    });\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        if (isFinalElement === true) {\n          // Changing the color-bar of finalElement index which has taken its final sorted position.\n          changeBackgroundColor(finalElement, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(finalElement, \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\");\n        } else {\n          // Changing the color-bar of elements which has not taken its final sorted position yet.\n          changeBackgroundColor(comparingElement2, \"rgba(225, 0, 120, 0.6)\");\n          changeBackgroundColor(minIndexElement, \"rgba(225, 0, 120, 0.6)\");\n        }\n\n        // From \"getSelectionSortAnimations\" function, we know that the array is sorted when finalElement is (array.length - 1).\n        // Resolving the promise when the finalElement index is (array.length - 1).\n        if (finalElement === array.length - 1) resolve();\n      }, (i + 6) * animationSpeed);\n    });\n    Promise.all([promise1, promise2]).then(playCompletedSoundEffect)\n    // Enabling the buttons when both the promises have been resolved.\n    .then(enableButtons);\n  }\n\n  // Resetting the color-bar style to default after the animations end.\n  resetBarStyleDefault(array, (animations.length + 6) * animationSpeed);\n};\n_c = SelectionSort;\nexport default SelectionSort;\nvar _c;\n$RefreshReg$(_c, \"SelectionSort\");","map":{"version":3,"names":["getSelectionSortAnimations","changeBackgroundColor","changeBoxShadow","swapBars","resetBarStyleDefault","disableButtons","enableButtons","playCompletedSoundEffect","SelectionSort","array","animationSpeed","animations","i","length","comparingElement1","comparingElement2","minIndexElement","doSwap","isFinalElement","finalElement","promise1","Promise","resolve","reject","setTimeout","promise2","all","then","_c","$RefreshReg$"],"sources":["/Users/poojithaprasad/algovizmain/Dal-Go--Data-Structure-and-Algorithm-Visualiser/Sorting Visualiser/src/SortingVisualizer/SortingAlgorithms/SelectionSort/SelectionSort.js"],"sourcesContent":["import getSelectionSortAnimations from \"./getSelectionSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n  playCompletedSoundEffect,\n} from \"../../HelperFunctions.js\";\n\nconst SelectionSort = (array, animationSpeed) => {\n  // Disabling the buttons so that the animation cannot be interrupted.\n  disableButtons();\n\n  // Getting the animations which has been generated in the \"getBubbleSortAnimations\" function.\n  const animations = getSelectionSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 6) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1],\n      minIndexElement = animations[i + 2],\n      doSwap = animations[i + 3],\n      isFinalElement = animations[i + 4],\n      finalElement = animations[i + 5];\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bar of current elements.\n        changeBackgroundColor(minIndexElement, \"rgba(0,0,255, 0.9)\");\n        changeBackgroundColor(comparingElement1, \"rgba(0,0,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          // Changing the color-bar of elements which has to be swapped.\n          changeBackgroundColor(minIndexElement, \"rgba(144,238,144, 0.9)\");\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\n          // Actually swapping the elements (heights).\n          swapBars(comparingElement1, minIndexElement);\n        }\n      }, i * animationSpeed);\n\n      // Resolving the promise after the setTimeout ends.\n      resolve();\n    });\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        if (isFinalElement === true) {\n          // Changing the color-bar of finalElement index which has taken its final sorted position.\n          changeBackgroundColor(finalElement, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(\n            finalElement,\n            \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\"\n          );\n        } else {\n          // Changing the color-bar of elements which has not taken its final sorted position yet.\n          changeBackgroundColor(comparingElement2, \"rgba(225, 0, 120, 0.6)\");\n          changeBackgroundColor(minIndexElement, \"rgba(225, 0, 120, 0.6)\");\n        }\n\n        // From \"getSelectionSortAnimations\" function, we know that the array is sorted when finalElement is (array.length - 1).\n        // Resolving the promise when the finalElement index is (array.length - 1).\n        if (finalElement === array.length - 1) resolve();\n      }, (i + 6) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n      .then(playCompletedSoundEffect)\n      // Enabling the buttons when both the promises have been resolved.\n      .then(enableButtons);\n  }\n\n  // Resetting the color-bar style to default after the animations end.\n  resetBarStyleDefault(array, (animations.length + 6) * animationSpeed);\n};\n\nexport default SelectionSort;\n"],"mappings":"AAAA,OAAOA,0BAA0B,MAAM,8BAA8B;AACrE,SACEC,qBAAqB,EACrBC,eAAe,EACfC,QAAQ,EACRC,oBAAoB,EACpBC,cAAc,EACdC,aAAa,EACbC,wBAAwB,QACnB,0BAA0B;AAEjC,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,cAAc,KAAK;EAC/C;EACAL,cAAc,EAAE;;EAEhB;EACA,MAAMM,UAAU,GAAGX,0BAA0B,CAACS,KAAK,CAAC;EAEpD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC7C,MAAME,iBAAiB,GAAGH,UAAU,CAACC,CAAC,CAAC;MACrCG,iBAAiB,GAAGJ,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;MACrCI,eAAe,GAAGL,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;MACnCK,MAAM,GAAGN,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;MAC1BM,cAAc,GAAGP,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;MAClCO,YAAY,GAAGR,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;;IAElC;IACA,MAAMQ,QAAQ,GAAG,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACtDC,UAAU,CAAC,MAAM;QACf;QACAvB,qBAAqB,CAACe,eAAe,EAAE,oBAAoB,CAAC;QAC5Df,qBAAqB,CAACa,iBAAiB,EAAE,kBAAkB,CAAC;QAC5Db,qBAAqB,CAACc,iBAAiB,EAAE,sBAAsB,CAAC;QAEhE,IAAIE,MAAM,KAAK,IAAI,EAAE;UACnB;UACAhB,qBAAqB,CAACe,eAAe,EAAE,wBAAwB,CAAC;UAChEf,qBAAqB,CAACa,iBAAiB,EAAE,wBAAwB,CAAC;UAClE;UACAX,QAAQ,CAACW,iBAAiB,EAAEE,eAAe,CAAC;QAC9C;MACF,CAAC,EAAEJ,CAAC,GAAGF,cAAc,CAAC;;MAEtB;MACAY,OAAO,EAAE;IACX,CAAC,CAAC;;IAEF;IACA,MAAMG,QAAQ,GAAG,IAAIJ,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACtDC,UAAU,CAAC,MAAM;QACf,IAAIN,cAAc,KAAK,IAAI,EAAE;UAC3B;UACAjB,qBAAqB,CAACkB,YAAY,EAAE,uBAAuB,CAAC;UAC5DjB,eAAe,CACbiB,YAAY,EACZ,wCAAwC,CACzC;QACH,CAAC,MAAM;UACL;UACAlB,qBAAqB,CAACc,iBAAiB,EAAE,wBAAwB,CAAC;UAClEd,qBAAqB,CAACe,eAAe,EAAE,wBAAwB,CAAC;QAClE;;QAEA;QACA;QACA,IAAIG,YAAY,KAAKV,KAAK,CAACI,MAAM,GAAG,CAAC,EAAES,OAAO,EAAE;MAClD,CAAC,EAAE,CAACV,CAAC,GAAG,CAAC,IAAIF,cAAc,CAAC;IAC9B,CAAC,CAAC;IAEFW,OAAO,CAACK,GAAG,CAAC,CAACN,QAAQ,EAAEK,QAAQ,CAAC,CAAC,CAC9BE,IAAI,CAACpB,wBAAwB;IAC9B;IAAA,CACCoB,IAAI,CAACrB,aAAa,CAAC;EACxB;;EAEA;EACAF,oBAAoB,CAACK,KAAK,EAAE,CAACE,UAAU,CAACE,MAAM,GAAG,CAAC,IAAIH,cAAc,CAAC;AACvE,CAAC;AAACkB,EAAA,GAlEIpB,aAAa;AAoEnB,eAAeA,aAAa;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}