{"ast":null,"code":"import getInsertionSortAnimations from \"./getInsertionSortAnimations\";\nimport { changeBackgroundColor, changeBoxShadow, swapBars, resetBarStyleDefault, disableButtons, enableButtons, playCompletedSoundEffect } from \"../../HelperFunctions.js\";\nconst InsertionSort = (array, animationSpeed) => {\n  // Disabling the buttons so that the animation cannot be interrupted.\n  disableButtons();\n\n  // Getting the animations which has been generated in the \"getInsertionSortAnimations\" function.\n  const animations = getInsertionSortAnimations(array);\n  for (let i = 0; i < animations.length; i += 4) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1],\n      doSwap = animations[i + 2],\n      sortedTill = animations[i + 3];\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bar of comparing elements.\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n        if (doSwap === true) {\n          // Changing the color-bar of elements which has to be swapped.\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\n          changeBackgroundColor(comparingElement2, \"rgba(144,238,144, 0.9)\");\n          // Actually swapping the elements (heights).\n          swapBars(comparingElement1, comparingElement2);\n        }\n      }, i * animationSpeed);\n\n      // Resolving the promise after the setTimeout ends.\n      resolve();\n    });\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bars of the elements till sortedTill index.\n        for (let j = 0; j <= sortedTill; j++) {\n          changeBackgroundColor(j, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(j, \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\");\n        }\n\n        // From \"getInsertionSortAnimations\" function, we know that the array is sorted when both the comparing elements are (array.length - 1).\n        // Resolving the promise when the both the comparing elemnts are (array.length - 1).\n        if (comparingElement1 === array.length - 1 && comparingElement2 === array.length - 1) resolve();\n      }, (i + 4) * animationSpeed);\n    });\n    Promise.all([promise1, promise2]).then(playCompletedSoundEffect)\n    // Enabling the buttons when both the promises have been resolved.\n    .then(enableButtons);\n  }\n\n  // Resetting the color-bar style to default after the animations end.\n  resetBarStyleDefault(array, (animations.length + 4) * animationSpeed);\n};\n_c = InsertionSort;\nexport default InsertionSort;\nvar _c;\n$RefreshReg$(_c, \"InsertionSort\");","map":{"version":3,"names":["getInsertionSortAnimations","changeBackgroundColor","changeBoxShadow","swapBars","resetBarStyleDefault","disableButtons","enableButtons","playCompletedSoundEffect","InsertionSort","array","animationSpeed","animations","i","length","comparingElement1","comparingElement2","doSwap","sortedTill","promise1","Promise","resolve","reject","setTimeout","promise2","j","all","then","_c","$RefreshReg$"],"sources":["/Users/poojithaprasad/algovizmain/Dal-Go--Data-Structure-and-Algorithm-Visualiser/Sorting Visualiser/src/SortingVisualizer/SortingAlgorithms/InsertionSort/InsertionSort.js"],"sourcesContent":["import getInsertionSortAnimations from \"./getInsertionSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n  playCompletedSoundEffect,\n} from \"../../HelperFunctions.js\";\n\nconst InsertionSort = (array, animationSpeed) => {\n  // Disabling the buttons so that the animation cannot be interrupted.\n  disableButtons();\n\n  // Getting the animations which has been generated in the \"getInsertionSortAnimations\" function.\n  const animations = getInsertionSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 4) {\n    const comparingElement1 = animations[i],\n      comparingElement2 = animations[i + 1],\n      doSwap = animations[i + 2],\n      sortedTill = animations[i + 3];\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bar of comparing elements.\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          // Changing the color-bar of elements which has to be swapped.\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\n          changeBackgroundColor(comparingElement2, \"rgba(144,238,144, 0.9)\");\n          // Actually swapping the elements (heights).\n          swapBars(comparingElement1, comparingElement2);\n        }\n      }, i * animationSpeed);\n\n      // Resolving the promise after the setTimeout ends.\n      resolve();\n    });\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bars of the elements till sortedTill index.\n        for (let j = 0; j <= sortedTill; j++) {\n          changeBackgroundColor(j, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(j, \"5px 5px 50px 5px rgba(0, 164, 86, 0.2)\");\n        }\n\n        // From \"getInsertionSortAnimations\" function, we know that the array is sorted when both the comparing elements are (array.length - 1).\n        // Resolving the promise when the both the comparing elemnts are (array.length - 1).\n        if (\n          comparingElement1 === array.length - 1 &&\n          comparingElement2 === array.length - 1\n        )\n          resolve();\n      }, (i + 4) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n      .then(playCompletedSoundEffect)\n      // Enabling the buttons when both the promises have been resolved.\n      .then(enableButtons);\n  }\n\n  // Resetting the color-bar style to default after the animations end.\n  resetBarStyleDefault(array, (animations.length + 4) * animationSpeed);\n};\n\nexport default InsertionSort;\n"],"mappings":"AAAA,OAAOA,0BAA0B,MAAM,8BAA8B;AACrE,SACEC,qBAAqB,EACrBC,eAAe,EACfC,QAAQ,EACRC,oBAAoB,EACpBC,cAAc,EACdC,aAAa,EACbC,wBAAwB,QACnB,0BAA0B;AAEjC,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,cAAc,KAAK;EAC/C;EACAL,cAAc,EAAE;;EAEhB;EACA,MAAMM,UAAU,GAAGX,0BAA0B,CAACS,KAAK,CAAC;EAEpD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC7C,MAAME,iBAAiB,GAAGH,UAAU,CAACC,CAAC,CAAC;MACrCG,iBAAiB,GAAGJ,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;MACrCI,MAAM,GAAGL,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;MAC1BK,UAAU,GAAGN,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;;IAEhC;IACA,MAAMM,QAAQ,GAAG,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACtDC,UAAU,CAAC,MAAM;QACf;QACArB,qBAAqB,CAACa,iBAAiB,EAAE,sBAAsB,CAAC;QAChEb,qBAAqB,CAACc,iBAAiB,EAAE,sBAAsB,CAAC;QAEhE,IAAIC,MAAM,KAAK,IAAI,EAAE;UACnB;UACAf,qBAAqB,CAACa,iBAAiB,EAAE,wBAAwB,CAAC;UAClEb,qBAAqB,CAACc,iBAAiB,EAAE,wBAAwB,CAAC;UAClE;UACAZ,QAAQ,CAACW,iBAAiB,EAAEC,iBAAiB,CAAC;QAChD;MACF,CAAC,EAAEH,CAAC,GAAGF,cAAc,CAAC;;MAEtB;MACAU,OAAO,EAAE;IACX,CAAC,CAAC;;IAEF;IACA,MAAMG,QAAQ,GAAG,IAAIJ,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACtDC,UAAU,CAAC,MAAM;QACf;QACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIP,UAAU,EAAEO,CAAC,EAAE,EAAE;UACpCvB,qBAAqB,CAACuB,CAAC,EAAE,uBAAuB,CAAC;UACjDtB,eAAe,CAACsB,CAAC,EAAE,wCAAwC,CAAC;QAC9D;;QAEA;QACA;QACA,IACEV,iBAAiB,KAAKL,KAAK,CAACI,MAAM,GAAG,CAAC,IACtCE,iBAAiB,KAAKN,KAAK,CAACI,MAAM,GAAG,CAAC,EAEtCO,OAAO,EAAE;MACb,CAAC,EAAE,CAACR,CAAC,GAAG,CAAC,IAAIF,cAAc,CAAC;IAC9B,CAAC,CAAC;IAEFS,OAAO,CAACM,GAAG,CAAC,CAACP,QAAQ,EAAEK,QAAQ,CAAC,CAAC,CAC9BG,IAAI,CAACnB,wBAAwB;IAC9B;IAAA,CACCmB,IAAI,CAACpB,aAAa,CAAC;EACxB;;EAEA;EACAF,oBAAoB,CAACK,KAAK,EAAE,CAACE,UAAU,CAACE,MAAM,GAAG,CAAC,IAAIH,cAAc,CAAC;AACvE,CAAC;AAACiB,EAAA,GA5DInB,aAAa;AA8DnB,eAAeA,aAAa;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}