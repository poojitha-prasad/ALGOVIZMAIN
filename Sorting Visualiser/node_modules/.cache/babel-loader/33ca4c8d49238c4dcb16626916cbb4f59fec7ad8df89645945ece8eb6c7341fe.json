{"ast":null,"code":"import getBubbleSortAnimations from \"./getBubbleSortAnimations\";\nimport { changeBackgroundColor, changeBoxShadow, swapBars, resetBarStyleDefault, disableButtons, enableButtons, playCompletedSoundEffect } from \"../../HelperFunctions.js\";\nconst BubbleSort = (array, animationSpeed) => {\n  // Disabling the buttons so that the animation cannot be interrupted.\n  disableButtons();\n\n  // Getting the animations which has been generated in the \"getBubbleSortAnimations\" function.\n  const animations = getBubbleSortAnimations(array);\n  for (let i = 0; i < animations.length; i += 5) {\n    const comparingElement1 = animations[i];\n    const comparingElement2 = animations[i + 1];\n    const doSwap = animations[i + 2];\n    const isFinalElement = animations[i + 3];\n    const finalElement = animations[i + 4];\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bar of comparing elements.\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n        if (doSwap === true) {\n          // Changing the color-bar of elements which has to be swapped.\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\n          changeBackgroundColor(comparingElement2, \"rgba(144,238,144, 0.9)\");\n          // Actually swapping the elements (heights).\n          swapBars(comparingElement1, comparingElement2);\n        }\n      }, i * animationSpeed);\n\n      // Resolving the promise after the setTimeout ends.\n      resolve();\n    });\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        if (isFinalElement === true) {\n          // Changing the color-bar of finalElement index which has taken its final sorted position.\n          changeBackgroundColor(finalElement, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(finalElement, \"5px 5px 50px 5px  rgba(0, 164, 86, 0.2)\");\n        } else {\n          // Changing the color-bar of element which has not taken its final sorted position yet.\n          changeBackgroundColor(comparingElement1, \"rgba(225, 0, 120, 0.6)\");\n          changeBoxShadow(comparingElement1, \"rgba(225, 0, 120, 0.2)\");\n        }\n        // From \"getBubbleSortAnimations\" function, we know that the array is sorted when finalElement is 0.\n        // Resolving the promise when the finalElement index is 0.\n        if (finalElement === 0) resolve();\n      }, (i + 5) * animationSpeed);\n    });\n    Promise.all([promise1, promise2]).then(playCompletedSoundEffect)\n    // Enabling the buttons when both the promises have been resolved.\n    .then(enableButtons);\n  }\n\n  // Resetting the color-bar style to default after the animations end.\n  resetBarStyleDefault(array, (animations.length + 5) * animationSpeed);\n};\n_c = BubbleSort;\nexport default BubbleSort;\nvar _c;\n$RefreshReg$(_c, \"BubbleSort\");","map":{"version":3,"names":["getBubbleSortAnimations","changeBackgroundColor","changeBoxShadow","swapBars","resetBarStyleDefault","disableButtons","enableButtons","playCompletedSoundEffect","BubbleSort","array","animationSpeed","animations","i","length","comparingElement1","comparingElement2","doSwap","isFinalElement","finalElement","promise1","Promise","resolve","reject","setTimeout","promise2","all","then","_c","$RefreshReg$"],"sources":["/Users/poojithaprasad/algovizmain/pushcodefolder/Dal-Go--Data-Structure-and-Algorithm-Visualiser/Sorting Visualiser/src/SortingVisualizer/SortingAlgorithms/BubbleSort/BubbleSort.js"],"sourcesContent":["import getBubbleSortAnimations from \"./getBubbleSortAnimations\";\nimport {\n  changeBackgroundColor,\n  changeBoxShadow,\n  swapBars,\n  resetBarStyleDefault,\n  disableButtons,\n  enableButtons,\n  playCompletedSoundEffect,\n} from \"../../HelperFunctions.js\";\n\nconst BubbleSort = (array, animationSpeed) => {\n  // Disabling the buttons so that the animation cannot be interrupted.\n  disableButtons();\n\n  // Getting the animations which has been generated in the \"getBubbleSortAnimations\" function.\n  const animations = getBubbleSortAnimations(array);\n\n  for (let i = 0; i < animations.length; i += 5) {\n    const comparingElement1 = animations[i];\n    const comparingElement2 = animations[i + 1];\n    const doSwap = animations[i + 2];\n    const isFinalElement = animations[i + 3];\n    const finalElement = animations[i + 4];\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise1 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        // Changing the color-bar of comparing elements.\n        changeBackgroundColor(comparingElement1, \"rgba(255,165,0, 0.9)\");\n        changeBackgroundColor(comparingElement2, \"rgba(255,165,0, 0.9)\");\n\n        if (doSwap === true) {\n          // Changing the color-bar of elements which has to be swapped.\n          changeBackgroundColor(comparingElement1, \"rgba(144,238,144, 0.9)\");\n          changeBackgroundColor(comparingElement2, \"rgba(144,238,144, 0.9)\");\n          // Actually swapping the elements (heights).\n          swapBars(comparingElement1, comparingElement2);\n        }\n      }, i * animationSpeed);\n\n      // Resolving the promise after the setTimeout ends.\n      resolve();\n    });\n\n    // Here, promise has been used to know when to Enable Buttons again after the setTimeout ends.\n    const promise2 = new Promise(function (resolve, reject) {\n      setTimeout(() => {\n        if (isFinalElement === true) {\n          // Changing the color-bar of finalElement index which has taken its final sorted position.\n          changeBackgroundColor(finalElement, \"rgba(0, 164, 86, 0.6)\");\n          changeBoxShadow(\n            finalElement,\n            \"5px 5px 50px 5px  rgba(0, 164, 86, 0.2)\"\n          );\n        } else {\n          // Changing the color-bar of element which has not taken its final sorted position yet.\n          changeBackgroundColor(comparingElement1, \"rgba(225, 0, 120, 0.6)\");\n          changeBoxShadow(comparingElement1, \"rgba(225, 0, 120, 0.2)\");\n        }\n        // From \"getBubbleSortAnimations\" function, we know that the array is sorted when finalElement is 0.\n        // Resolving the promise when the finalElement index is 0.\n        if (finalElement === 0) resolve();\n      }, (i + 5) * animationSpeed);\n    });\n\n    Promise.all([promise1, promise2])\n      .then(playCompletedSoundEffect)\n      // Enabling the buttons when both the promises have been resolved.\n      .then(enableButtons);\n  }\n\n  // Resetting the color-bar style to default after the animations end.\n  resetBarStyleDefault(array, (animations.length + 5) * animationSpeed);\n};\n\nexport default BubbleSort;\n"],"mappings":"AAAA,OAAOA,uBAAuB,MAAM,2BAA2B;AAC/D,SACEC,qBAAqB,EACrBC,eAAe,EACfC,QAAQ,EACRC,oBAAoB,EACpBC,cAAc,EACdC,aAAa,EACbC,wBAAwB,QACnB,0BAA0B;AAEjC,MAAMC,UAAU,GAAGA,CAACC,KAAK,EAAEC,cAAc,KAAK;EAC5C;EACAL,cAAc,EAAE;;EAEhB;EACA,MAAMM,UAAU,GAAGX,uBAAuB,CAACS,KAAK,CAAC;EAEjD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC7C,MAAME,iBAAiB,GAAGH,UAAU,CAACC,CAAC,CAAC;IACvC,MAAMG,iBAAiB,GAAGJ,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;IAC3C,MAAMI,MAAM,GAAGL,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;IAChC,MAAMK,cAAc,GAAGN,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;IACxC,MAAMM,YAAY,GAAGP,UAAU,CAACC,CAAC,GAAG,CAAC,CAAC;;IAEtC;IACA,MAAMO,QAAQ,GAAG,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACtDC,UAAU,CAAC,MAAM;QACf;QACAtB,qBAAqB,CAACa,iBAAiB,EAAE,sBAAsB,CAAC;QAChEb,qBAAqB,CAACc,iBAAiB,EAAE,sBAAsB,CAAC;QAEhE,IAAIC,MAAM,KAAK,IAAI,EAAE;UACnB;UACAf,qBAAqB,CAACa,iBAAiB,EAAE,wBAAwB,CAAC;UAClEb,qBAAqB,CAACc,iBAAiB,EAAE,wBAAwB,CAAC;UAClE;UACAZ,QAAQ,CAACW,iBAAiB,EAAEC,iBAAiB,CAAC;QAChD;MACF,CAAC,EAAEH,CAAC,GAAGF,cAAc,CAAC;;MAEtB;MACAW,OAAO,EAAE;IACX,CAAC,CAAC;;IAEF;IACA,MAAMG,QAAQ,GAAG,IAAIJ,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;MACtDC,UAAU,CAAC,MAAM;QACf,IAAIN,cAAc,KAAK,IAAI,EAAE;UAC3B;UACAhB,qBAAqB,CAACiB,YAAY,EAAE,uBAAuB,CAAC;UAC5DhB,eAAe,CACbgB,YAAY,EACZ,yCAAyC,CAC1C;QACH,CAAC,MAAM;UACL;UACAjB,qBAAqB,CAACa,iBAAiB,EAAE,wBAAwB,CAAC;UAClEZ,eAAe,CAACY,iBAAiB,EAAE,wBAAwB,CAAC;QAC9D;QACA;QACA;QACA,IAAII,YAAY,KAAK,CAAC,EAAEG,OAAO,EAAE;MACnC,CAAC,EAAE,CAACT,CAAC,GAAG,CAAC,IAAIF,cAAc,CAAC;IAC9B,CAAC,CAAC;IAEFU,OAAO,CAACK,GAAG,CAAC,CAACN,QAAQ,EAAEK,QAAQ,CAAC,CAAC,CAC9BE,IAAI,CAACnB,wBAAwB;IAC9B;IAAA,CACCmB,IAAI,CAACpB,aAAa,CAAC;EACxB;;EAEA;EACAF,oBAAoB,CAACK,KAAK,EAAE,CAACE,UAAU,CAACE,MAAM,GAAG,CAAC,IAAIH,cAAc,CAAC;AACvE,CAAC;AAACiB,EAAA,GA/DInB,UAAU;AAiEhB,eAAeA,UAAU;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}